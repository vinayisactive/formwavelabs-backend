generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id String @id @default(uuid())
  name String
  email String @unique
  password String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  workspaces Workspace[]
  memberships WorkspaceMember[]
  invitatioins Invitation[]
}

model Workspace {
  id String @id @default(uuid())
  name String
  userId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  forms Form[]
  invitations Invitation[]
  members WorkspaceMember[]
  assets WorkspaceAssets[]
}

model WorkspaceAssets {
  id String @id @default(uuid())
  workspaceId String
  imageUrl String 
  imagePublicId String

  workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
}

enum Role {
  OWNER
  ADMIN
  EDITOR
  VIEWER
}

model WorkspaceMember {
  id String @id @default(uuid())
  userId String
  workspaceId String
  role Role @default(VIEWER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum InvitationStatus {
  PENDING
  ACCEPTED
  REJECTED
}

model Invitation {
  id String @id @default(uuid())
  email String
  userId String?
  role Role @default(VIEWER)
  token String @unique
  expiresAt DateTime
  workspaceId String
  status InvitationStatus @default(PENDING)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User? @relation(fields: [userId], references: [id])
  workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
}

enum Theme {
  BOXY
  ROUNDED
}

model Form {
  id String @id @default(uuid())
  workspaceId String
  title String
  description String?
  theme Theme @default(ROUNDED)
  status Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  pages FormPage[]
  submissions Submission[]
  visits FormVisit[]
  analyticsSummary FormAnalyticsSummary? 

  @@index([workspaceId])
  @@index([status])
  @@index([createdAt])
}

model FormPage {
  id String @id @default(uuid())
  page Int
  formId String
  content String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  form Form @relation(fields: [formId], references: [id], onDelete: Cascade)

  @@index([formId])
  @@index([page, formId])
}

model Submission {
  id String @id @default(uuid())
  formId String
  content String
  createdAt DateTime @default(now())

  form Form @relation(fields: [formId], references: [id], onDelete: Cascade)
    
  @@index([formId])
  @@index([createdAt])
}

enum DeviceType {
  MOBILE
  DESKTOP
}

model FormVisit {
  id String @id @default(uuid())
  formId String 
  deviceType DeviceType
  createdAt DateTime @default(now())

  form Form @relation(fields: [formId], references: [id], onDelete: Cascade)

   @@index([formId])
  @@index([createdAt])
  @@index([formId, deviceType])
}

model FormAnalyticsSummary {
  id String @id @default(uuid())
  formId String  @unique
  totalVisits Int  @default(0)
  mobileVisits Int @default(0)
  desktopVisits Int @default(0)

  form Form @relation(fields: [formId], references: [id], onDelete: Cascade)
}